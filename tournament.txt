--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): Ben, 
        If i get betrayed, always betray next move
Player 1 (P1): FoxHound, The Best offense Is The Best Defense
        Swap between collide and betray: Kyler
Player 2 (P2): Jeysi, Betraying
        The first move will be betray.When ever they collude I collude. then whe
        n they betray I betray.
Player 3 (P3): Team Team, BIG BUTTERY CAKES
        It will betray twice then colude. - Otis
Player 4 (P4): 5-in-1, Collude first round, Betray until not betrayed consecutively
        Collude the first round, Betray every round unless not betrayed 10 round
        s prior -Semaj
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4
vs. P0 :      0   -200   -200   -250    -32
vs. P1 :   -200      0   -200   -250    -40
vs. P2 :   -200   -200      0   -250   -249
vs. P3 :   -250   -250   -250      0   -250
vs. P4 :    -53    -45   -249   -250      0
TOTAL  :   -703   -695   -899  -1000   -572
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
5-in-1    (P4):       -114 points with Collude first round, Betray until not be
FoxHound  (P1):       -139 points with The Best offense Is The Best Defense    
Ben       (P0):       -140 points with                                         
Jeysi     (P2):       -179 points with Betraying                               
Team Team (P3):       -200 points with BIG BUTTERY CAKES                       
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team0--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Ben' # Only 10 chars displayed.
strategy_name = ''
strategy_description = 'If i get betrayed, always betray next move'
    
def move(my_history, their_history, my_score, their_score):
    if len(my_history)==0:
        return 'b'
    elif my_history[-1]=='c' and their_history[-1]=='b':
        return 'b'
    elif my_history[-1]=='b' and their_history[-1]=='c':
        return 'c'
    else:
        return 'c'
        
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0,
              their_score=0,
              result='b')--------------------------------------------------------------------------------
team3--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'FoxHound' # Only 10 chars displayed.
strategy_name = 'The Best offense Is The Best Defense'
strategy_description = 'Swap between collide and betray: Kyler'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    if len(my_history)==0:
        return 'c'
    elif their_history[-1] == 'b':
        return 'b'
    else :
        return 'c'
    
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Jeysi' # Only 10 chars displayed.
strategy_name = 'Betraying'
strategy_description = 'The first move will be betray.When ever they collude I collude. then when they betray I betray.' 
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    if len(their_history)==0:
       return 'b'
    elif their_history[-1]=='c':
        return 'c'
    elif their_history[-1]=='b':
        return 'b'
    
   
   
   

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team6--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Team Team' # Only 10 chars displayed.	
strategy_name = 'BIG BUTTERY CAKES'	
strategy_description = 'It will betray twice then colude. - Otis'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    if my_history==0:	
        if my_history[-1]=='b' + my_history[-2]=='b':	
            return 'c'	
        else:	
            return'b'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team5--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = '5-in-1' # Only 10 chars displayed.
strategy_name = 'Collude first round, Betray until not betrayed consecutively'
strategy_description = 'Collude the first round, Betray every round unless not betrayed 10 rounds prior -Semaj'

def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    c_rounds = 0
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if len(my_history) == 0 and len(their_history) == 0:
        return 'c'
    elif len(their_history) >= 11 :
        for i in range(-1,-11, -1):
            if their_history[i] == 'c' :
                c_rounds += 1
        if c_rounds == 10:
            return 'c'
    else:
        return 'b'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
Section 3 - Game Data for Team Ben
--------------------------------------------------------------------------------
-200.0 pt/round: Ben(P0) ""
-200.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
-200.3184713375796 pt/round: Ben(P0) ""
-200.3184713375796 pt/round: Jeysi(P2) "Betraying"
bcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
bBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-250.0 pt/round: Ben(P0) ""
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccc
        

--------------------------------------------------------------------------------
-53.01724137931034 pt/round: Ben(P0) ""
-32.327586206896555 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
BcbcbcbcbcbccccccccccCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
cBbBbBbBbBb          CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team FoxHound
--------------------------------------------------------------------------------
-200.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
-200.0 pt/round: Ben(P0) ""
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-200.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
-200.0 pt/round: Jeysi(P2) "Betraying"
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-250.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

--------------------------------------------------------------------------------
-45.45454545454545 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
-40.49586776859504 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
CcbbbbbbbbbbccccccccccCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CBbbbbbbbbb           CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Jeysi
--------------------------------------------------------------------------------
-200.3184713375796 pt/round: Jeysi(P2) "Betraying"
-200.3184713375796 pt/round: Ben(P0) ""
bBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
bcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
-200.0 pt/round: Jeysi(P2) "Betraying"
-200.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
-250.0 pt/round: Jeysi(P2) "Betraying"
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
b                                                                               
                                                                                

                                                  
                                                  

--------------------------------------------------------------------------------
-249.48717948717947 pt/round: Jeysi(P2) "Betraying"
-249.48717948717947 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
Bcbbbbbbbbbb                                                                    
cBbbbbbbbbb                                                                     

                                                                                
                                                                                

                                   
                                   

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Team Team
--------------------------------------------------------------------------------
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
-250.0 pt/round: Ben(P0) ""
                                                                                
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

        
cccccccc

--------------------------------------------------------------------------------
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
-250.0 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
-250.0 pt/round: Jeysi(P2) "Betraying"
                                                                                
b                                                                               

                                                  
                                                  

--------------------------------------------------------------------------------
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
-250.0 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
                                                                                
cbbbbbbbbbb                                                                     

                                                                                
                                                                                

     
     

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team 5-in-1
--------------------------------------------------------------------------------
-32.327586206896555 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
-53.01724137931034 pt/round: Ben(P0) ""
cBbBbBbBbBb          CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
BcbcbcbcbcbccccccccccCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-40.49586776859504 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
-45.45454545454545 pt/round: FoxHound(P1) "The Best offense Is The Best Defense"
CBbbbbbbbbb           CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CcbbbbbbbbbbccccccccccCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-249.48717948717947 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
-249.48717948717947 pt/round: Jeysi(P2) "Betraying"
cBbbbbbbbbb                                                                     
Bcbbbbbbbbbb                                                                    

                                                                                
                                                                                

                                   
                                   

--------------------------------------------------------------------------------
-250.0 pt/round: 5-in-1(P4) "Collude first round, Betray until not betrayed consecutively"
-250.0 pt/round: Team Team(P3) "BIG BUTTERY CAKES"
cbbbbbbbbbb                                                                     
                                                                                

                                                                                
                                                                                

     
     

--------------------------------------------------------------------------------
